"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printers = exports.languages = exports.parsers = void 0;
const prettier_1 = require("prettier");
const parser_html_1 = require("prettier/parser-html");
const blockHashes = new Array();
const htmlParser = parser_html_1.parsers.html;
let _id = 0;
const getId = () => {
    _id = _id + (1 % Number.MAX_SAFE_INTEGER);
    return _id.toString();
};
const buildReplacement = (input, allTagsClosed) => {
    const id = getId();
    if (allTagsClosed && input.match(/{{[-<]? (?:if|range|block|with|define)/)) {
        blockHashes.push(id);
        return `<BPGT${id}EPGT>`;
    }
    if (allTagsClosed && input.match(/{{[-<]? end/)) {
        return `</BPGT${blockHashes.pop()}EPGT>`;
    }
    return `BPGT${id}EPGT`;
};
const replacements = new Map();
exports.parsers = {
    "go-template": Object.assign(Object.assign({}, htmlParser), { astFormat: "go-template", preprocess: (text) => {
            var _a, _b;
            const regexp = /(?:{{.*?}})|(?:<script(?:\n|.)*?>)((?:\n|.)*?)(?:<\/script>)/gm;
            let replacedText = text.trim();
            let match;
            while ((match = regexp.exec(text)) != null) {
                const result = match[0];
                if (!result.includes("{{")) {
                    continue;
                }
                const cleanedResult = result
                    .replace(/{{(?![-<]|(?:\/\*))[ \t]*/g, "{{ ")
                    .replace(/[ \t]*(?<![->]|(?:\*\/))}}/g, " }}")
                    .replace(/{{-[ \t]*/g, "{{- ")
                    .replace(/[ \t]*-}}/g, " -}}")
                    .replace(/{{<[ \t]*/g, "{{< ")
                    .replace(/[ \t]*>}}/g, " >}}")
                    .replace(/ *\n/g, "\n")
                    .trim();
                const resultIndex = replacedText.indexOf(result);
                const prefixString = replacedText.substring(0, resultIndex);
                const openingTags = (_a = prefixString.match(/<[\w/]/)) === null || _a === void 0 ? void 0 : _a.length;
                const closingTags = (_b = prefixString.match(/[\w/]>/)) === null || _b === void 0 ? void 0 : _b.length;
                const replacement = buildReplacement(cleanedResult, openingTags === closingTags);
                replacedText = replacedText.replace(result, replacement);
                const forceLinebreak = !!replacedText.match(new RegExp(`^[ \t]*${replacement}[ \t]*$`, "gm"));
                if (forceLinebreak && !replacement.includes("<")) {
                    const linebreakReplacement = `<!--BPGT${replacement}EPGT-->`;
                    replacedText = replacedText.replace(replacement, linebreakReplacement);
                    replacements.set(linebreakReplacement, cleanedResult);
                }
                else {
                    replacements.set(replacement, cleanedResult);
                }
            }
            if (blockHashes.length > 0) {
                throw Error("Missing ending block.");
            }
            return replacedText;
        } }),
};
exports.languages = [
    {
        name: "GoTemplate",
        parsers: ["go-template"],
        extensions: [
            ".go.html",
            ".gohtml",
            ".gotmpl",
            ".go.tmpl",
            ".tmpl",
            ".tpl",
            ".html.tmpl",
            ".html.tpl",
        ],
        vscodeLanguageIds: ["gotemplate", "gohtml", "GoTemplate", "GoHTML"],
    },
];
function replaceSingles(input, replacedHashes = new Array()) {
    const regexp = /(?:<!--BPGT)?BPGT.*?EPGT(?:EPGT-->)?/g;
    let result = input;
    let match;
    while ((match = regexp.exec(input)) != null) {
        const hash = match[0];
        const replacement = replacements.get(hash);
        if (replacement) {
            result = result.replace(hash, replacement);
            replacedHashes.push(hash);
        }
    }
    return result;
}
let lastMissedBracket = false;
function replaceBlocks(input, replacedHashes = new Array()) {
    var _a, _b, _c, _d;
    let result = input;
    const fullOpeningTags = (_a = input.match(/<BPGT.*?EPGT>/g)) !== null && _a !== void 0 ? _a : [];
    const openOpeningTag = ((_b = input.match(/<BPGT.*?EPGT(?!>)/g)) !== null && _b !== void 0 ? _b : [])[0];
    const fullClosingTags = (_c = input.match(/<\/BPGT.*?EPGT>/g)) !== null && _c !== void 0 ? _c : [];
    const openClosingTag = ((_d = input.match(/<\/BPGT.*?EPGT(?!>)/g)) !== null && _d !== void 0 ? _d : [])[0];
    if (lastMissedBracket && input.match(/[\t ]*>/)) {
        lastMissedBracket = false;
        result = result.replace(/[\t ]*>/, "");
    }
    fullOpeningTags.forEach((openingTag) => {
        replacedHashes.push(openingTag);
        result = result.replace(openingTag, replacements.get(openingTag));
    });
    if (openOpeningTag) {
        const fixedOpeningTag = openOpeningTag + ">";
        lastMissedBracket = true;
        replacedHashes.push(fixedOpeningTag);
        result = result.replace(openOpeningTag, replacements.get(fixedOpeningTag));
    }
    fullClosingTags.forEach((fullClosingTag) => {
        replacedHashes.push(fullClosingTag);
        result = result.replace(fullClosingTag, replacements.get(fullClosingTag));
    });
    if (openClosingTag) {
        const fixedClosingTag = openClosingTag + ">";
        lastMissedBracket = true;
        replacedHashes.push(fixedClosingTag);
        result = result.replace(openClosingTag, replacements.get(fixedClosingTag));
    }
    return result;
}
exports.printers = {
    "go-template": {
        embed: (_, __, textToDoc, options) => {
            const htmlDoc = textToDoc(options.originalText, {
                parser: "html",
            });
            const replacedHashes = [];
            const mappedDoc = prettier_1.doc.utils.mapDoc(htmlDoc, (docLeaf) => {
                if (typeof docLeaf !== "string") {
                    return docLeaf;
                }
                let result = docLeaf;
                result = replaceSingles(result, replacedHashes);
                result = replaceBlocks(result, replacedHashes);
                return result;
            });
            replacedHashes.forEach((hash) => replacements.delete(hash));
            return mappedDoc;
        },
    },
};
//# sourceMappingURL=data:application/json;base64,